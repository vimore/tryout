package com.securityx.modelfeature.dao;

import com.securityx.modelfeature.auth.User;
import com.securityx.modelfeature.config.FeatureServiceConfiguration;
import com.securityx.modelfeature.utils.AppUser;
import com.securityx.modelfeature.utils.BCrypt;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

/**
 * Created by sachinkapse on 25/05/16.
 */

/**
 * UserDao Class
 */
public class UserDao extends BaseDao {
    private static final Logger LOGGER = LoggerFactory.getLogger(UserDao.class);

    private FeatureServiceConfiguration configuration = null;


    public UserDao(FeatureServiceConfiguration conf) {
        super(conf);
        this.configuration = conf;
    }

    public List<User> fetchUsers(User.USER_TYPE userType) {

        List<User> users = new ArrayList<User>();



        String sqlStr = "SELECT " + AppUser.columns() +
                " FROM " + AppUser.getName(configuration);

        String whereClause = "";

        switch (userType) {
            case NORMAL:
                whereClause = " WHERE " + AppUser.IS_AUTO_GENERATED() + " = false ";
                break;
            case GENERATED:
                whereClause = " WHERE " + AppUser.IS_AUTO_GENERATED() + " = true ";
                break;
            case ALL:
                break;
        }

        sqlStr = sqlStr + whereClause;
        Connection conn = null;
        try {
            conn = this.getConnection(configuration);
            PreparedStatement pstmt = getPreparedStatement(conn, sqlStr);
            ResultSet rs = executeQuery(pstmt);

            while (rs.next()) {

                String user_role = rs.getString(AppUser.USER_ROLE().toString());
                user_role = user_role.toLowerCase().contains("admin") ? User.ROLE_ADMIN : User.ROLE_VIEWER;

                User user = new User();

                user.setUsername(rs.getString(AppUser.USER_NAME().toString()));
                //user.setPassword(rs.getString(AppUser.PASSWORD().toString()));
                user.setDisplayName(rs.getString(AppUser.DISPLAY_NAME().toString()));
                user.setUserRole(user_role);
                user.setActiveStatus(rs.getBoolean(AppUser.ACTIVE_STATUS().toString()));
                user.setCreatedForApp(rs.getString(AppUser.CREATED_FOR_APP().toString()));
                user.setIsAutoGenerated(rs.getBoolean(AppUser.IS_AUTO_GENERATED().toString()));

                users.add(user);
            }

        } catch (Exception e) {
            LOGGER.error("Failed to get Users list from DB ::  " + e.getMessage());
        } finally {
            closeConnections(conn);
        }

        return users;

    }

    public User fetchUserDetailsByUserName(String userName) {

        User user = new User();
        String sqlStr = "SELECT " + AppUser.columns() +
                " FROM " + AppUser.getName(configuration) +
                " WHERE " + AppUser.USER_NAME() + " = '" + userName + "'";
        Connection conn = null;
        try {
            conn = this.getConnection(configuration);
            PreparedStatement pstmt = getPreparedStatement(conn, sqlStr);
            ResultSet rs = executeQuery(pstmt);

            while (rs.next()) {

                String user_role = rs.getString(AppUser.USER_ROLE().toString());
                user_role = user_role.toLowerCase().contains("admin") ? User.ROLE_ADMIN : User.ROLE_VIEWER;

                user.setUsername(rs.getString(AppUser.USER_NAME().toString()));
                user.setPassword(rs.getString(AppUser.PASSWORD().toString()));
                user.setDisplayName(rs.getString(AppUser.DISPLAY_NAME().toString()));
                user.setUserRole(user_role);
                user.setActiveStatus(rs.getBoolean(AppUser.ACTIVE_STATUS().toString()));
                user.setCreatedForApp(rs.getString(AppUser.CREATED_FOR_APP().toString()));
                user.setIsAutoGenerated(rs.getBoolean(AppUser.IS_AUTO_GENERATED().toString()));

            }

        } catch (Exception e) {
            LOGGER.error("Failed to get User Details from DB for user : " + userName + " ::  " + e.getMessage(), e);
        } finally {
            closeConnections(conn);
        }

        return user;

    }

    public Boolean addUser(User newUser) {

        Boolean operationStatus = false;

        Connection conn = null;
        PreparedStatement pstmt = null;

        // User creation date
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        df.setTimeZone(TimeZone.getTimeZone("UTC"));
        String userCreatedOn = df.format(new Date(System.currentTimeMillis()));

        try {
            String displayName = newUser.getDisplayName() == null || newUser.getDisplayName().isEmpty() ? "" : newUser.getDisplayName();
            String userRole = newUser.getUserRole() == null || newUser.getUserRole().isEmpty() ? User.ROLE_VIEWER : newUser.getUserRole();
            Boolean activeStatus = newUser.getActiveStatus() == null ? false : newUser.getActiveStatus();
            Boolean isAutoGenerated = newUser.getIsAutoGenerated() == null ? false : newUser.getIsAutoGenerated();
            String createdForApp = newUser.getCreatedForApp() == null || newUser.getDisplayName().isEmpty() ? "" : newUser.getDisplayName();

            // Generate encrypted password
            String encryptedPassword = BCrypt.hashpw(newUser.getPassword(), BCrypt.gensalt(12));

            // UPSERT INTO APP_USERS VALUES ('user1','User 1','pwd','VIEWER','2016-05-27T00:00:00.000Z',true)

            String sqlStr = "UPSERT INTO " + AppUser.getName(configuration) + " VALUES ( '" +
                    newUser.getUsername() + "', '" + displayName + "', '" + encryptedPassword + "', '" +
                    userRole + "', '" + userCreatedOn + "', " + activeStatus + ", '" +
                    newUser.getCreatedForApp() + "', " + isAutoGenerated + " ) ";

            conn = this.getConnection(configuration);
            pstmt = getPreparedStatement(conn, sqlStr);
            int st = executeUpdate(pstmt);

            if (st == 1) {
                operationStatus = true;
            }

        } catch (NoSuchAlgorithmException e) {
            LOGGER.error("Failed to add User into DB ::  " + e.getMessage());
        } catch (Exception e) {
            LOGGER.error("Failed to add User into DB ::  " + e.getMessage());
        } finally {
            closeConnections(conn);
        }

        return operationStatus;

    }

    public Boolean removeUserByUserName(String userName) {

        Boolean operationStatus = false;

        Connection conn = null;
        PreparedStatement pstmt = null;

        // DELETE FROM APP_USERS WHERE USER_NAME = 'user5';
        String sqlStr = "DELETE FROM " + AppUser.getName(configuration) + " WHERE USER_NAME = '" + userName + "'";

        try {
            conn = this.getConnection(configuration);
            pstmt = getPreparedStatement(conn, sqlStr);
            int st = executeUpdate(pstmt);

            if (st == 1) {
                operationStatus = true;
            }

        } catch (Exception e) {
            LOGGER.error("Failed to add User into DB ::  " + e.getMessage());
        } finally {
            closeConnections(conn);
        }

        return operationStatus;

    }

    @Override
    public FeatureServiceConfiguration conf() {
        return this.configuration;
    }
}
