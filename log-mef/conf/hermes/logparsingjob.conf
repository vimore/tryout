include classpath("morphline/parsing_config.conf")

#windows_dhcp.date.timeZone : "PST"
dnsmasq_dhcp.date.timeZone: "UTC"

bluecoat_default.header = [
  "date",
  "time",
  "time-taken",
  "c-ip",
  "cs(X-Forwarded-For)",
  "cs-username",
  "cs-auth-group",
  "x-exception-id",
  "sc-filter-result",
  "cs-categories",
  "cs(Referer)",
  "sc-status",
  "s-action",
  "cs-method",
  "rs(Content-Type)",
  "cs-uri-scheme",
  "cs-host",
  "cs-uri-port",
  "cs-uri-path",
  "cs-uri-query",
  "cs-uri-extension"
  "cs(User-Agent)",
  "s-ip",
  "sc-bytes",
  "cs-bytes",
  "x-virus-id",
  "c-uri-address"
]

syslog.sysloglogcollection.forwarder_cleaning = [{
  tryRules {
    catchExceptions: true
    throwExceptionIfAllRulesFailed: false
    rules: [
      {
        commands: [
          {
            addKeyValuesIfMissing {
              _syslogMessage: "@{syslogMessage}"
            }
          },
          {
            removeFields {
              blacklist: ["literal:syslogMessage"]
              whitelist: []
            }
          }
          {

            grokcmd {
              # broken by relocation of morphline config to resource
              #dictionaryFiles : [logcollection-grok-patterns]
              dictionaryString: """
              ####################
              # Syslog severity
              FORWARDER 207\.\d{1,3}\.\d{1,3}\.\d{1,3}
              SYSLOGHEADER \S+\s\S+
              ##################
              # GENERIC
              DATAGREEDY .*
            """
              #Oct 16 10:49:20 ciscopix %PIX-6-302015: B....
              expressions: {
                _syslogMessage: """^\s%{FORWARDER}\s%{SYSLOGHEADER}\s%{DATAGREEDY:syslogMessage}"""
              }
              extract: true
              findSubstrings: true
              addEmptyStrings: false
            }
          }

        ]
      },
      # atl-ern-lb04-2-netscaler.homedepot.
      # atl-ern-lb04-2-netscaler.homedepot.com
      {
        commands: [
          {
            addKeyValuesIfMissing {
              _syslogMessage: "@{syslogMessage}"
            }
          },
          {
            removeFields {
              blacklist: ["literal:syslogMessage"]
              whitelist: []
            }
          }
          {

            grokcmd {
              # broken by relocation of morphline config to resource
              #dictionaryFiles : [logcollection-grok-patterns]
              dictionaryString: """
              ####################
              # Syslog severity
              FORWARDER atl-ern-lb\d+-\d+-netscaler(\.[^\s\.]+)*
              SYSLOGHEADER \S+\s\S+
              ##################
              # GENERIC
              DATAGREEDY .*
            """
              #Oct 16 10:49:20 ciscopix %PIX-6-302015: B....
              expressions: {
                _syslogMessage: """^\s%{FORWARDER}\s%{SYSLOGHEADER}\s%{DATAGREEDY:syslogMessage}"""
              }
              extract: true
              findSubstrings: true
              addEmptyStrings: false
            }
          }

        ]
      },
      {
        commands: [
          {
            addKeyValuesIfMissing {
              syslogMessage: "@{_syslogMessage}"
            }
          }
        ]
      }
    ]

  }
}]
syslog.sysloglogcollection.timezone_hook = [{
  pipe {
    id: customer_timezone_handler
    importCommands: ["org.kitesdk.**", "org.apache.solr.**", "com.securityx.**"]
    commands: [
      {
        addKeyValuesIfMissing {
          logCollectionTimeZone: "@{deviceNameOrIp}"
        }
      },
      {
        translate {
          field: logCollectionTimeZone
          dictionary: {
            "atl-ern-dhcpa": "EST"
            "aus-ern-dhcpa": "EST"
            "aus-ern-dhcpb": "EST"
          }
          fallback: "UTC"
        }
      }
    ]
  }
}
]


tanium-connect_custom_rules = [
  #Running process process rules
  {
    commands: [
      { # get data from json
        extractJsonPaths {
          flatten: false
          paths: {
            deviceNameOrIp: "/E8-Get-Computer-Name-and-Running-Processes-with-MD5-Hash-from-all-machines---2/Computer Name"
            processFilePath: "/E8-Get-Computer-Name-and-Running-Processes-with-MD5-Hash-from-all-machines---2/Path"
            processFileMd5: "/E8-Get-Computer-Name-and-Running-Processes-with-MD5-Hash-from-all-machines---2/MD5 Hash"
          }
        }
      },
      {
        if {
          conditions: [{
            grok {
              dictionaryString: """
                             ERROR Error:
                             GREEDY .*
                           """
              expressions: {
                processFilePath: """%{ERROR}%{GREEDY}""",
              }
              extract: false
              findSubstrings: false
              addEmptyStrings: false
            }
          }
          ]
          then: [{dropRecord {}}]
          else: []
        }
      },
      {
        java {
          imports: "import org.apache.commons.io.FilenameUtils;"
          code: """

    // manipulate the contents of a record field
    if (record.get("processFilePath") == null || record.get("processFilePath").size() == 0)
       return false;
    String processPath = (String) record.get("processFilePath").get(0);
    record.put("processName", FilenameUtils.getName(processPath));
    return child.process(record); // pass record to next command in chain
        """
        }
      },
      #set fields
      {
        addKeyValuesIfMissing {
          cefSignatureId: "Seen"
          taniumPorts: ""
          logSourceType: "HostProcessMef"
          externalLogSourceType: "tanium-E8-Get-Computer-Name-and-Running-Processes-with-MD5-Hash-from-all-machines---2"
          startTime: "@{logCollectionTime}"
        }
      },
      {
        validateSupportedFormat {
          failOnUnknownFields: "false"
          defaultFormat: "HostProcessMef"
        }
      },
      #      {
      #        logInfo {format: "tanium Json Record: {}", args: ["@{}"]}
      #      },
    ]
  },
  # Autorun process rules
  {
    commands: [
      { # get data from json
        extractJsonPaths {
          flatten: false
          paths: {
            deviceNameOrIp: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Computer Name"
            processFilePath: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Image Path"
            processFileMd5: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/MD5 Hash"
            jobCmd: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Launch String"
            processFileVersion: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Version"
            jobName: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Entry"
            jobLocation: "/E8-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines/Entry Location"
          }
        }
      },
      {
        #get filename from filepath
        grok {
          dictionaryString: """
                        NAME .+
                      """
          expressions: {
            jobName: """%{NAME}""",
          }
          extract: false
          findSubstrings: false
          addEmptyStrings: false
        }
      },
      #set fields
      {
        addKeyValuesIfMissing {
          cefSignatureId: "Autorun"
          logSourceType: "HostJobMef"
          externalLogSourceType: "tanium-Get-Computer-Name-and-AutoRun-Program-Details-from-all-machines"
          startTime: "@{logCollectionTime}"
        }
      },
      {
        validateSupportedFormat {
          failOnUnknownFields: "false"
          defaultFormat: "HostJobMef"
        }
      },
      #      {
      #        logInfo {format: "tanium Json Record: {}", args: ["@{}"]}
      #      },
    ]
  }
]
