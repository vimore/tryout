include classpath("logparsingjob.conf")
morphlines: [
  {
    id: cefcrowdstrike
    importCommands: ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]
    commands: [
      {
        harnessCmd {
          morphlineFile: "logcollection-cef.conf",
          morphlineId: "cefnew",
          transferFieldNamedToMessage: "message",
          messageFieldName: "syslogMessage"
        }
      },
      {
        harnessCmd {
          morphlineFile: "crowdstrikecef-to-mef.conf",
          morphlineId: "cefincident",
          transferFieldNamedToMessage: "message",
          messageFieldName: "syslogMessage"
          fullCopy: true
        }
      }
    ]
  },
  {
    id: cefcrowdstrikeselector
    importCommands: ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands: [
      #{
      #  logInfo { format : "jyria cefincident: {}", args : ["@{}"] }
      #},
      {
        addKeyValuesIfMissing {
          _cefSignatureId: "@{cefSignatureId}",
        }
      },
      {
        removeFields {
          blacklist : ["literal:cefSignatureId", "literal:logSourceType"]
          whitelist: []
        }
      },
      {
        scriptSelector {
          scripts: [
            {
              logicalName: "falcondetectionsummaryevent",
              morphlineFile: "crowdstrikecef-to-mef.conf",
              morphlineId: "falcondetectionsummaryevent"
              transferFieldNamedToMessage: "syslogMessage"
              fullCopy: true
            },
            {
              logicalName: "leef_mcafeewebsec",
              morphlineFile: "webproxymef-mcafee_websecurity.conf",
              morphlineId: "leef_mcafeewebsec"
              transferFieldNamedToMessage: "leefExtensionData"
              messageFieldName: "leef_websecMessage"
              fullCopy: true
            },
            {
              logicalName: "leef_BCN_Adonis",
              morphlineFile: "hetmef-bcn_adonis-dhcp.conf",
              morphlineId: "leef_bcnadonis"
              transferFieldNamedToMessage: "leefExtensionData"
              messageFieldName: "leef_adonisMessage"
              fullCopy: true
            }
          ]
          ################################################################################
          selectors: [
            {
              # detection summary event from falcon
              pattern: "^DetectionSummaryEvent"
              logicalScriptName: ["falcondetectionsummaryevent"]
              readFromFieldNamed: "_cefSignatureId"
              subPatterns: []
            },
            {
              # dpi-dns events
              pattern: "^McAfee-Web Gateway"
              logicalScriptName: ["leef_mcafeewebsec"]
              readFromFieldNamed: "leefProductKey"
              subPatterns: []
            },
            {
              pattern: "^BCN-Adonis"
              logicalScriptName: ["leef_BCN_Adonis"]
              readFromFieldNamed: "leefProductKey"
              subPatterns: []
            }
          ]
        },# scriptSelector end
      },
      {
        addKeyValuesIfMissing {
          externalLogSourceType: "cef-@{cefDeviceProduct}-@{_cefSignatureId}",
          #logSourceType: "Cef"
          deviceNameOrIp: "@{logCollectionHost}"
          startTime = "@{receiptTime}"
        }
      }
    ]
  },

  {
    id: falcondetectionsummaryevent
    importCommands: ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands: [
      {
        grok {
          dictionaryString : """
            FILEPATHPREFIX [/\\]
            FILEPATH %{FILEPATHPREFIX:_fileSep}.*
          """
          expressions : {
            filePath : """%{FILEPATH}"""
          }
          extract : true,
          findSubstrings : false,
          addEmptyStrings : false
        }
      },
      {
        addKeyValuesIfMissing {
          processFilePath: "@{filePath}@{_fileSep}@{fname}",
          processFileMd5: "@{fileHash}"
          processName: "@{fname}"
          logSourceType: "HostProcessMef"
          deviceNameOrIp: "@{shost}"
          deviceNtDomain: "@{sntdom}"
          deviceUserName: "@{suser}"
          startTime = "@{deviceCustomDate1}"
          cefSignatureId = "Seen"
        }
      },
      {
        date2timestamp{
          inputFieldName : "startTime",
          dateFormat : "yyyy-MM-dd HH:mm:ss",
          precision : "ms"
          timeZone : "UTC"
        }
      }



      #{
      #  logInfo { format : "jyria cefincident: {}", args : ["@{}"] }
      #},
    ]
  }
]