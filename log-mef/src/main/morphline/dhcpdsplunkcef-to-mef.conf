include classpath("logparsingjob.conf")
morphlines: [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id: dhcpdsplunkcef

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this
    # morphline.
    importCommands: [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]


    #SAMPLE LOG : windows snare
    #MSWinEventLog  0 Security  9676  Thu Apr 24 12:43:48 2014  4672  Microsoft-Windows-Security-Auditing    E8SEC\W2K8R2-AD$ N/A Success Audit w2k8r2-AD.e8sec.lab Special Logon   Special privileges assigned to new logon.    Subject:   Security ID:  S-1-5-18   Account Name:  W2K8R2-AD$   Account Domain:  E8SEC   Logon ID:  0x285d611    Privileges:  SeSecurityPrivilege     SeBackupPrivilege     SeRestorePrivilege     SeTakeOwnershipPrivilege     SeDebugPrivilege     SeSystemEnvironmentPrivilege     SeLoadDriverPrivilege     SeImpersonatePrivilege     SeEnableDelegationPrivilege 9675 

    commands: [
      {
        addKeyValuesIfMissing {
          deviceInterface: "@{cs1}",
          deviceProcessName: "@{dproc}",
          externalLogSourceType: "@{cefDeviceProduct}",
          logSourceType: "HETMef"
          externalLogSourceType: "dhcpd"
          deviceNameOrIp: "@{logCollectionHost}"
          startTime = "@{receiptTime}"
        }
      },
      {
        mapRules {
          fieldName: "cefSignatureId"
          catchExceptions: false
          throwExceptionIfAllRulesFailed: false
          rules: [
            # DHCPACK
            {
              values: ["DHCPACK"]
              commands: [
                #{contains {cefSignatureId: ["DHCPACK"]}}
                {
                  addKeyValuesIfMissing  {
                    destinationMacAddress: "@{cs3}",
                    destinationAddress: "@{cs2}",
                    destinationNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPREQUEST
            {
              values: ["DHCPREQUEST"]
              commands: [
                #{contains {cefSignatureId: ["DHCPREQUEST"]}}
                {
                  addKeyValuesIfMissing  {
                    sourceMacAddress: "@{cs3}",
                    sourceAddress: "@{cs2}",
                    sourceNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPRELEASE
            {
              values: ["DHCPRELEASE"]
              commands: [
                #{contains {cefSignatureId: ["DHCPRELEASE"]}}
                {
                  addKeyValuesIfMissing  {
                    destinationMacAddress: "@{cs3}",
                    destinationAddress: "@{cs2}",
                    destinationNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPNAK
            {
              values: ["DHCPNAK"]
              commands: [
                #{contains {cefSignatureId: ["DHCPNAK"]}}
                {
                  addKeyValuesIfMissing  {
                    destinationMacAddress: "@{cs3}",
                    destinationAddress: "@{cs2}",
                    destinationNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPINFORM
            {
              values: ["DHCPINFORM"]
              commands: [
                #{contains {cefSignatureId: ["DHCPINFORM"]}}
                {
                  addKeyValuesIfMissing  {
                    sourceMacAddress: "@{cs3}",
                    sourceAddress: "@{cs2}",
                    sourceNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPDISCOVER
            {
              values: ["DHCPDISCOVER"]
              commands: [
                #{contains {cefSignatureId: ["DHCPDISCOVER"]}}
                {
                  addKeyValuesIfMissing  {
                    sourceMacAddress: "@{cs3}",
                    sourceAddress: "@{cs2}",
                    sourceNameOrIp: "@{shost}"
                  }
                }
              ]
            },
            # DHCPOFFER
            {
              values: ["DHCPOFFER"]
              commands: [
                #{contains {cefSignatureId: ["DHCPOFFER"]}}
                {
                  addKeyValuesIfMissing  {
                    destinationMacAddress: "@{cs3}",
                    destinationAddress: "@{cs2}",
                    destinationNameOrIp: "@{shost}"
                  }
                }
              ]
            }

          ]
        }
      },
      {
        translate {
          field: cefSignatureId
          dictionary: {
            "DHCP_RenewLease": DHCPACK
            "DHCP_GrantLease": DHCPACK
            "DHCPACK": DHCPACK
            "DHCPREQUEST": DHCPREQUEST
            "DHCPRELEASE": DHCPRELEASE
            "DHCPNAK": DHCPNACK
            "DHCPINFORM":DHCPINFORM
            "uid lease":DHCPISSUE
            "Added new forward map":DHCPDNSUP
          }
          fallback: Unknown # if no fallback is defined and no match is found then the command fails
        },
      },
      {
        findReplace {
          field : logSourceType
          #dictionaryFiles : [kite-morphlines-core/src/test/resources/grok-dictionaries]
          #pattern : """%{WORD:myGroup}"""
          pattern : """Cef"""
          isRegex : false
          replacement : "HETMef"
          #replacement : "$1!"
          #replacement : ""
          replaceFirst : true
        }
      },{
        validateSupportedFormat {
          failOnUnknownFields: "false"
          defaultFormat: "HETMef"
        }
      }
    ]
  }
]