morphlines : [
  {
    id : nprobe
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
        {
          if {
            conditions : [
              { isNProbeHeader { field="message" } }
            ]
            then : [
              { nProbeHeaderExtractor { field="message" } }
            ]
            else : [
              { 
                harnessCmd  {
                  morphlineFile : "flowmef-nprobe.conf"
                  morphlineId : "nprobeKVP"
                  transferFieldNamedToMessage : "message"
                  messageFieldName : "nprobeKVPInput"
                }
              }
            ]
          }
        },
    ]
  }, 
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : nprobenetflowcollectorKVP

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this
    # morphline.
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]
    commands : [
      {
        tsvq {
            inputFieldName : "message",
            fieldSep : ",",
            quoteChar : "\"",
            trim : true,
            fieldNames : [
              "IPV4_SRC_ADDR",
              "IPV4_DST_ADDR",
              "IPV4_NEXT_HOP",
              "INPUT_SNMP",
              "OUTPUT_SNMP",
              "IN_PKTS",
              "IN_BYTES",
              "FIRST_SWITCHED",
              "LAST_SWITCHED",
              "L4_SRC_PORT",
              "L4_DST_PORT",
              "TCP_FLAGS",
              "PROTOCOL",
              "SRC_TOS",
              "SRC_AS",
              "DST_AS",
              "IPV4_SRC_MASK",
              IPV4_DST_MASK
            ]
        }
      },
      {
        addKeyValuesIfMissing {
          FLOW_START_MILLISECONDS : "@{FIRST_SWITCHED}000"
          logSourceType : "nProbe",
          deviceNameOrIp : "@{logCollectionHost}"

        }
      },
      {
        flowMefFormat {
            formatIdFromFieldName : "logSourceType",  
            discardUnmappableFields : "false", 
            discardOriginalMappedFields :  "true"
            }
      },
      {
        validateSupportedFormat  {
            failOnUnknownFields : "false"
            defaultFormat : "FlowMef"
        }
      }
    ]
  }, 
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id : nprobeKVP

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this
    # morphline.
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]
    commands : [
      {
        tsvq {
            inputFieldName : "nprobeKVPInput",
            fieldSep : ",",
            quoteChar : "\"",
            trim : true,
            fieldNames : [
              "IPV4_SRC_ADDR",
              "IPV4_DST_ADDR",
              "L4_SRC_PORT",
              "L4_DST_PORT",
              "FIRST_SWITCHED",
              "LAST_SWITCHED",
              "IN_BYTES",
              "OUT_BYTES",
              "IN_PKTS",
              "OUT_PKTS",
              "IN_SRC_MAC",
              "OUT_DST_MAC",
              "FLOWS",
              "PROTOCOL",
              "PROTOCOL_MAP",
              "SRC_TOS",
              "TCP_FLAGS",
              "INPUT_SNMP",
              "OUTPUT_SNMP",
              "IPV4_NEXT_HOP",
              "SRC_AS",
              "DST_AS",
              "ICMP_TYPE",
              "SAMPLING_INTERVAL",
              "SAMPLING_ALGORITHM",
              "FLOW_ACTIVE_TIMEOUT",
              "FLOW_INACTIVE_TIMEOUT",
              "ENGINE_TYPE",
              "ENGINE_ID",
              "TOTAL_BYTES_EXP",
              "TOTAL_PKTS_EXP",
              "TOTAL_FLOWS_EXP",
              "MIN_TTL",
              "MAX_TTL",
              "SRC_VLAN",
              "DST_VLAN",
              "DIRECTION",
              "IPV4_SRC_MASK",
              "IPV4_DST_MASK",
              "FLOW_START_MILLISECONDS",
              "FLOW_END_MILLISECONDS",
              "L4_SRV_PORT",
              "IP_PROTOCOL_VERSION",
              "BIFLOW_DIRECTION"
            ]
        }
      },
#      {
#        addValuesIfAbsent  {
#            logSourceType : "nProbe",
#            deviceNameOrIp : "@{logCollectionHost}"
#        }
#      },
      {
        addKeyValuesIfMissing {
          FLOW_START_MILLISECONDS : "@{FIRST_SWITCHED}000"
          logSourceType : "nProbe",
          deviceNameOrIp : "@{logCollectionHost}"

        }
      },
      {
        flowMefFormat {
            formatIdFromFieldName : "logSourceType",  
            discardUnmappableFields : "false", 
            discardOriginalMappedFields :  "true"
            }
      },

#      {
#        setValues {
#          logSourceType : []                #delete
#        }
#      },
#      {
#        setValues {
#          logSourceType : "FlowMef"    #replace
#        }
#      },
      {
        validateSupportedFormat  {
            failOnUnknownFields : "false"
            defaultFormat : "FlowMef"
        }
      }

#     ,
#      {
#        date2timestamp{
#            inputFieldName : "startTime", 
#            dateFormat : "yyyy-MM-dd HH:mm:ss",  
#            precision : "ms",
#            timeZone : "UTC"
#        }
#      },
#      validateMef moved to selectorScript      
#      {
#        validateMef  {
#            failOnUnknownFields : "false"
#        }
#      }
       
    ]
  }
]