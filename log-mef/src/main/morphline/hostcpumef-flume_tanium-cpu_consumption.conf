include classpath("logparsingjob.conf")
morphlines : [
  {
    id : tanium-cpu_consumptions
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {
        xquery {
          fragments : [
            {
              fragmentPath : "/"
              queryString : """
                            for $measure in /result_set/rs/r
                            return
                            <record>
                              <deviceNameOrIp>{$measure/c[1]/v}</deviceNameOrIp>
                              <hostCpu>{$measure/c[2]/v}</hostCpu>
                              <hostMem>{$measure/c[3]/v}</hostMem>
                            </record>
                            """
            }
          ]
        }
      },
      {
        if {
          conditions: [
            {
              contains { deviceNameOrIp: ["[no results]"]}
            }
          ]
          then: [
            {
              dropRecord {}
            }
          ]
          else: [
            {
              addKeyValuesIfMissing  {
                hostCpu: "tanium-@{taniumQuestion}"
                hostMem: "@{logCollectionHost}"
              }
            },{
              #clean up extracted parts
              grok {
                dictionaryString : """
                DATE \d+\/\d+\/\d+\s\d+:\d+:\d+\s\w+
                CPU \d+(?:\.\d+)?
                MEM \d+(?:\.\d+)?
            """
                expressions : {
                  taniumTime : """%{DATE:startTime}-\d+""",
                  hostCpu : """%{CPU:cpuConsumption}(?:\s+%)?"""
                  hostMem : """%{MEM:memConsumption}(?:\s+%)?"""
                }
                extract : true
                findSubstrings : false
                addEmptyStrings : false
              }
            },
            {
              addKeyValuesIfMissing  {
                logSourceType: "HostCpuMef"
                externalLogSourceType: "tanium-@{taniumQuestion}"
                deviceNameOrIp: "@{logCollectionHost}"
              }
            },
            {
              date2timestamp{
                inputFieldName : "startTime",
                dateFormat : ${tanium.date.dateFormat} ,
                precision : "ms",
                timeZone : ${tanium.date.timeZone}
              }
            },
            {
              validateSupportedFormat  {
                failOnUnknownFields : "false"
                defaultFormat : "HostCpuMef"
              }
            }
          ]
        }

      }

#        ,
#        {
#          grokcmd{
#             dictionaryString : """
#              PATH [^?]+
#              QUERY .*
#            """
#            #1392068647.385 117047 81.56.112.95 TCP_MISS/200 4814 CONNECT hivedata.jiveon.com:443 - DIRECT/23.218.66.131 -
#            expressions : {
#                dpiRequestQuery : """%{PATH:requestPath}\?%{QUERY:requestQuery}"""
#            }
#          extract : true
#          findSubstrings : false
#          addEmptyStrings : false
#          }
#        }

    ]
  }

]