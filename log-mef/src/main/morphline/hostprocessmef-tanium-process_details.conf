include classpath("logparsingjob.conf")
morphlines : [
  {
    id : tanium-process_details
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {
        xquery {
          fragments : [
            {
              fragmentPath : "/"
              queryString : """
                            let $now := /result_sets/now
                            for $measure at $pos in /result_sets/result_set/rs/r
                            return
                            <record>
                              <taniumTime>{$now}</taniumTime>
                              <deviceNameOrIp>{$measure/c[1]/v}</deviceNameOrIp>
                              <processName>{$measure/c[2]/v}</processName>
                              <md5>{$measure/c[3]/v}</md5>
                              <processFilePath>{$measure/c[4]/v}</processFilePath>
                              <taniumPorts>{$measure/c[5]/v}</taniumPorts>
                              <recordId>{$pos}</recordId>
                            </record>
                            """
            }
          ]
        }
      },
      {
        removeFields {
          blacklist : ["literal:taniumMessage"]
          #whitelist: ["literal:foobar", "glob:baro*"]
        }
      },
      {
        if {
          conditions: [
            {
              contains { deviceNameOrIp: ["[no results]"]}
            }
          ]
          then: [
            {
              dropRecord {}
            }
          ]
          else: [
            {
              clone {
                fieldName: "logSourceType"
                fieldValues: [ "HostProcessMef", "HostPortMef"]
              }
            }
            {
              if {
                conditions: [
                  {
                    contains {logSourceType: ["HostProcessMef"]}
                  }
                ]
                then: [   ## processing conversion to HostProcessMef

                  {
                    addKeyValuesIfMissing  {
                      md5: ""
                      cefSignatureId: "Seen"
                      taniumPorts: ""
                    }

                  },
                  {
                    #clean up extracted parts
                    grok {
                      dictionaryString : """
                       DATE \d+\/\d+\/\d+\s\d+:\d+:\d+\s\w+
                        MD5 \S+
                        PORTS \S+
                      """
                      expressions : {
                        taniumTime : """%{DATE:startTime}-\d+""",
                        md5 : """(?:|%{MD5:processFileMd5}\s+.*)"""
                        taniumPorts: """(?:^$|\d+\s+\{%{PORTS:processPorts}\})"""
                      }
                      extract : true
                      findSubstrings : false
                      addEmptyStrings : false
                    }
                  },
               # the list of port is expected.
               #   {
               #     removeFields {
               #       blacklist : ["literal:taniumPorts"]
               #       #whitelist: ["literal:foobar", "glob:baro*"]
               #     }
               #   },
                  {
                    addKeyValuesIfMissing  {
                      logSourceType: "HostProcessMef"
                      externalLogSourceType: "tanium-@{taniumQuestion}"
                      deviceNameOrIp: "@{logCollectionHost}"
                    }
                  },
                  {
                    date2timestamp{
                      inputFieldName : "startTime",
                      dateFormat : ${tanium.date.dateFormat} ,
                      precision : "ms",
                      timeZone : ${tanium.date.timeZone}
                    }
                  },
                  {
                    validateSupportedFormatAlt  {
                      failOnUnknownFields : "false"
                      defaultFormat : "HostProcessMef"
                      passThrough: true #prevent stop on first fail
                    }
                  }
                ]
                else: [   ## processing conversion to HostPortMef
                  {
                    addKeyValuesIfMissing  {
                      md5: ""
                      ports: ""
                      cefSignatureId: "Seen"
                    }
                  },
                  {
                    #clean up extracted parts
                    grok {
                      dictionaryString : """
                        DATE \d+\/\d+\/\d+\s\d+:\d+:\d+\s\w+
                        MD5 \S+
                        PORTS \S+
                      """
                      expressions : {
                        taniumTime : """%{DATE:startTime}-\d+""",
                        md5 : """(?:|%{MD5:processFileMd5}\s+.*)""",
                        taniumPorts: """\d+\s+\{%{PORTS:ports}\}"""

                      }
                      extract : true
                      findSubstrings : false
                      addEmptyStrings : false
                    }
                  },
                  {
                    addKeyValuesIfMissing  {
                      logSourceType: "HostPortMef"
                      externalLogSourceType: "tanium-@{taniumQuestion}"
                      deviceNameOrIp: "@{logCollectionHost}"
                    }
                  },
                  {
                    date2timestamp{
                      inputFieldName : "startTime",
                      dateFormat : ${tanium.date.dateFormat} ,
                      precision : "ms",
                      timeZone : ${tanium.date.timeZone}
                    }
                  },
                  {
                    demux {
                      inputField: "ports"
                      outputField: "port"
                      splitRegex: ""","""
                      replicate: true
                      cleanUpInputField: true
                    }
                  },
                  {
                    #clean up extracted parts
                    grok {
                      dictionaryString : """
                        PROTOCOL [^/]+
                        ADDRESS [^:]+
                        PORT \d+
                      """
                      expressions : {
                        port : """%{PROTOCOL:transportProtocol}/%{ADDRESS:deviceListenAddress}:%{PORT:processListenPort}""",
                      }
                      extract : true
                      findSubstrings : false
                      addEmptyStrings : false
                    }
                  },
                  {
                    validateSupportedFormatAlt  {
                      failOnUnknownFields : "false"
                      defaultFormat : "HostPortMef"
                      passThrough: true   #to prevent first failure to stop
                    }
                  }
                ]
              }
            },


          ]
        }

      }

#        ,
#        {
#          grokcmd{
#             dictionaryString : """
#              PATH [^?]+
#              QUERY .*
#            """
#            #1392068647.385 117047 81.56.112.95 TCP_MISS/200 4814 CONNECT hivedata.jiveon.com:443 - DIRECT/23.218.66.131 -
#            expressions : {
#                dpiRequestQuery : """%{PATH:requestPath}\?%{QUERY:requestQuery}"""
#            }
#          extract : true
#          findSubstrings : false
#          addEmptyStrings : false
#          }
#        }

    ]
  }

]