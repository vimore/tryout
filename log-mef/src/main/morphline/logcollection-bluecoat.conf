include classpath("logparsingjob.conf")
morphlines : [
  { id : bluecoat-jpmc_parser
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]
    commands : [
      {
        harnessCmd  {
          morphlineFile : "logcollection-bluecoat.conf",
          morphlineId : "bluecoat-jpmc",
          transferFieldNamedToMessage : "message",
          messageFieldName : "bluecoatInput"
        }
      }
    ]
  },
  { id : bluecoat-bulk_parser
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]
    commands : [
      {
        harnessCmd  {
          morphlineFile : "logcollection-bluecoat.conf",
          morphlineId : "bluecoat",
          transferFieldNamedToMessage : "message",
          messageFieldName : "bluecoatInput"
        }
      }
    ]
  },
  {
    id : bluecoat-jpmc
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
        #{
        #  grokcmd {
        #    # broken by relocation of morphline config to resource
        #    #dictionaryFiles : [logcollection-grok-patterns]
        #    dictionaryString : """
        #      HEADER \w{3}\s\d+\s\d+:\d+:\d+\s\d+\.\d+\.\d+\.\d+\s\w{3}\s\d+\s\d+:\d+:\d+
        #      BLUECOATDATA .*
        #    """
        #    #May 15 00:00:00 10.44.68.11 May 14 21:59:55 10.224.12.131 "[14/May/2014:23:59:55 +0200]" 0adb22abe1c07b11602fd44de176527f GET http://feeds.store.ovi.com/service/bannerrequest.ashx?device=N8-00 HTTP/1.1 407 280 0 0 TCP_DENIED 2760 1 0 165.242.16.103 3157 "Mozilla/5.0" "Software Downloads" ICAP_NOT_SCANNED - 10.44.116.31 20 0
        #    expressions : {
        #       message : """%{HEADER}\s%{BLUECOATDATA:bluecoatInput}"""
        #    }
        #    extract : true
        #    findSubstrings : false
        #    addEmptyStrings : false
        #  }
        #},
        {
          if {
            conditions : [
              { isBlueCoatHeader { field="bluecoatInput" } }
            ]
            then : [
              { blueCoatHeaderExtractor { field="bluecoatInput" } }
            ]
            else : [
              { 
                harnessCmd  {
                  morphlineFile : "logcollection-bluecoat.conf"
                  morphlineId : "bluecoatKVPjpmc"
                  transferFieldNamedToMessage : "bluecoatInput"
                  messageFieldName : "bluecoatInput"
                }
              },
              {
                date2timestamp{
                    inputFieldName : "startTime", 
                    dateFormat : "yyyy-MM-dd HH:mm:ss",
                    precision : "ms",
                    timeZone : "UTC"
                    forceTimeZone: true
                }
              },
              {
                webProxyMefFormat {
                    formatIdFromFieldName : "logSourceType",  
                    discardUnmappableFields : "false", 
                    discardOriginalMappedFields :  "true"
                    }
              },
              {
                addKeyValuesIfMissing {
                  sourceNameOrIp: "@{sourceAddress}"
                }
              },
                    {
                validateSupportedFormat  {
                  failOnUnknownFields : "false"
                  defaultFormat : "WebProxyMef"
                }
              }

            ]
          }
        },
    ]
  },
  {
    id : bluecoat-laposte
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {
        grokcmd {
          # broken by relocation of morphline config to resource
          #dictionaryFiles : [logcollection-grok-patterns]
          dictionaryString : """
              HEADER \w{3}\s\d+\s\d+:\d+:\d+\s\d+\.\d+\.\d+\.\d+\s\w{3}\s\d+\s\d+:\d+:\d+
              BLUECOATDATA .*
            """
          #May 15 00:00:00 10.44.68.11 May 14 21:59:55 10.224.12.131 "[14/May/2014:23:59:55 +0200]" 0adb22abe1c07b11602fd44de176527f GET http://feeds.store.ovi.com/service/bannerrequest.ashx?device=N8-00 HTTP/1.1 407 280 0 0 TCP_DENIED 2760 1 0 165.242.16.103 3157 "Mozilla/5.0" "Software Downloads" ICAP_NOT_SCANNED - 10.44.116.31 20 0
          expressions : {
            message : """%{HEADER}\s%{BLUECOATDATA:bluecoatInput}"""
          }
          extract : true
          findSubstrings : false
          addEmptyStrings : false
        }
      },
      {
        if {
          conditions : [
            { isBlueCoatHeader { field="bluecoatInput" } }
          ]
          then : [
            { blueCoatHeaderExtractor { field="bluecoatInput" } }
          ]
          else : [
            {
              harnessCmd  {
                morphlineFile : "logcollection-bluecoat.conf"
                morphlineId : "bluecoatKVPlaposte"
                transferFieldNamedToMessage : "bluecoatInput"
                messageFieldName : "bluecoatInput"
              }
            },
            {
              date2timestamp{
                inputFieldName : "startTime",
                dateFormat : "'['dd/MMM/yyyy:HH:mm:ss Z']'",
                precision : "ms",
                timeZone : "UTC"
                forceTimeZone: true
              }
            },
            {
              webProxyMefFormat {
                formatIdFromFieldName : "logSourceType",
                discardUnmappableFields : "false",
                discardOriginalMappedFields :  "true"
              }
            },
            {
              validateSupportedFormat  {
                failOnUnknownFields : "false"
                defaultFormat : "WebProxyMef"
              }
            }

          ]
        }
      },
    ]
  },
  {
    id : bluecoat1Y
    importCommands : ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
        {
          if {
            conditions : [
              { isBlueCoatHeader { field="bluecoatInput" } }
            ]
            then : [
              { blueCoatHeaderExtractor { field="bluecoatInput" } }
            ]
            else : [
              { 
                harnessCmd  {
                  morphlineFile : "logcollection-bluecoat.conf"
                  morphlineId : "bluecoatKVP1Y"
                  transferFieldNamedToMessage : "bluecoatInput"
                  messageFieldName : "bluecoatInput"
                }
              },
              {
                date2timestamp{
                    inputFieldName : "startTime", 
                    dateFormat : "yyyy-MM-dd HH:mm:ss",  
                    precision : "ms",
                    timeZone : "UTC"
                    forceTimeZone: true
                }
              },
              {
                webProxyMefFormat {
                    formatIdFromFieldName : "logSourceType",  
                    discardUnmappableFields : "false", 
                    discardOriginalMappedFields :  "true"
                    }
              },
              {
                validateSupportedFormat  {
                  failOnUnknownFields : "false"
                  defaultFormat : "WebProxyMef"
                }
              }

            ]
          }
        },
    ]
  },
  {
    id : bluecoat
    importCommands : ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
        {
          removeFields {
            blacklist : ["literal:logCollectionTmeZone"]
            whitelist: []
          }
        },
        {
          if {
            conditions : [
              { isBlueCoatHeader { field="bluecoatInput" } }
            ]
            then : [
              { blueCoatHeaderExtractor { field="bluecoatInput" } }
            ]
            else : [
              { 
                harnessCmd  {
                  morphlineFile : "logcollection-bluecoat.conf"
                  morphlineId : "bluecoatKVP"
                  transferFieldNamedToMessage : "bluecoatInput"
                  messageFieldName : "bluecoatInput"
                }
              },
              {
                date2timestamp{
                    inputFieldName : "startTime", 
                    dateFormat : ${bluecoat.date.dateFormat}#"yyyy-MM-dd HH:mm:ss",  
                    precision : "ms",
                    timeZone : ${bluecoat.date.timeZone}, #"UTC"
                    forceTimeZone: true
                }
              },
              {
                webProxyMefFormat {
                    formatIdFromFieldName : "logSourceType",  
                    discardUnmappableFields : "false", 
                    discardOriginalMappedFields :  "true"
                    }
              },
              {
                if {
                  conditions: [
                    {contains {destinationAddress: ["-"]}}
                  ]
                  then: [
                    {
                      removeFields {
                        blacklist : ["glob:destinationAddress"]
                        whitelist: []
                      }
                    }
                  ]
                  else: [

                  ]
                }
              },
              {
                addKeyValuesIfMissing {
                  sourceNameOrIp: "@{sourceAddress}"
                }
              },
              {
                validateSupportedFormat  {
                  failOnUnknownFields : "false"
                  defaultFormat : "WebProxyMef"
                }
              }

            ]
          }
        },
    ]
  },
  {
    id : bluecoatfromfile
    importCommands : ["org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {
        if {
          conditions : [
            { isBlueCoatHeader { field="message" } }
          ]
          then : [
            { blueCoatHeaderExtractor { field="message" } }
          ]
          else : [
            {
              harnessCmd  {
                morphlineFile : "logcollection-bluecoat.conf"
                morphlineId : "bluecoatKVP"
                transferFieldNamedToMessage : "message"
                messageFieldName : "bluecoatInput"
              }
            },
            {
              date2timestamp{
                inputFieldName : "startTime",
                dateFormat : ${bluecoat_elff.date.dateFormat}#"yyyy-MM-dd HH:mm:ss",
                precision : "ms",
                timeZone : ${bluecoat_elff.date.timeZone}, #"UTC"
                forceTimeZone: true
              }
            },
            {
              webProxyMefFormat {
                formatIdFromFieldName : "logSourceType",
                discardUnmappableFields : "false",
                discardOriginalMappedFields :  "true"
              }
            },
            {
              validateSupportedFormat  {
                failOnUnknownFields : "false"
                defaultFormat : "WebProxyMef"
              }
            }

          ]
        }
      },
    ]
  },
  {
    id : bluecoatalt
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
        {
          if {
            conditions : [
              { isBlueCoatHeader { field="message" } }
            ]
            then : [
              { blueCoatHeaderExtractor { field="message" } }
            ]
            else : [
              { 
                harnessCmd  {
                  morphlineFile : "logcollection-bluecoat.conf"
                  morphlineId : "bluecoatKVP"
                  transferFieldNamedToMessage : "message"
                  messageFieldName : "bluecoatInput"
                }
              },
              {
                date2timestamp{
                    inputFieldName : "startTime", 
                    dateFormat : "dd/MM/yyyy HH:mm:ss",  
                    precision : "ms",
                    timeZone : "UTC"
                    forceTimeZone: true
                }
              },
              {
                webProxyMefFormat {
                    formatIdFromFieldName : "logSourceType",  
                    discardUnmappableFields : "false", 
                    discardOriginalMappedFields :  "true"
                    }
              },
              {
                addKeyValuesIfMissing {
                  sourceNameOrIp: "@{sourceAddress}"
                }
              },
              {
                validateSupportedFormat  {
                  failOnUnknownFields : "false"
                  defaultFormat : "WebProxyMef"
                }
              }
            ]
          }
        },
    ]
  }, 
  {
    id : bluecoatKVP
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {

        tsvq {
            inputFieldName : "bluecoatInput",
            fieldSep : " ",
            quoteChar : "\"",
            trim : true,
            fieldNames : ${bluecoat_default.header}

        }
      },
      {
        addKeyValuesIfMissing  {
            logSourceType : "BlueCoat"
            deviceNameOrIp : "@{logCollectionHost}"
            cs(X-Forwarded-For) : "-"  #set value to "-" if missing
        }
      },
      {
        if {
          conditions: [
            {not {contains {cs(X-Forwarded-For): ["-"]}}}
            #{not {equals {cs(X-Forwarded-For): ["-"]}}}  #test if field is present and not empty
          ]
          then: [
            {
              removeFields {
                blacklist : ["glob:c-ip"]
                whitelist: []
              }
            },
            {
              addKeyValuesIfMissing  {
                "c-ip" : "@{cs(X-Forwarded-For)}"
              }
            }

          ]
          else: [

          ]
        }
      },
      {
        fieldAggregator{
          startTime : ["%{date} %{time}"],
          requestUrl : [
              "%{cs-uri-scheme}://%{cs-host}:%{cs-uri-port}%{cs-uri-path}?%{cs-uri-query}",
              "%{cs-uri-scheme}://%{cs-host}%{cs-uri-path}?%{cs-uri-query}"
          ],
          reason : [
              "%{x-virus-id}, %{x-icap-error-code} : %{x-icap-error-details}"
          ]  
        }
      },
      { # populate fields with raw data (will be converted by translate in the right way) 
        setValues {
          applicationProtocol : "@{cs-uri-scheme}", 
          transportProtocol : "@{cs-uri-scheme}"
        }
      },
      {
        translate {
          field : applicationProtocol
          dictionary : {
             http : http
             https : https
             ftp : ftp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      },
      {
        translate {
          field : transportProtocol
          dictionary : {
             http : tcp
             https : tcp
             ftp : tcp
             tcp : tcp
             udp : udp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      }

    ]
  },
  {
    id : bluecoatKVP1Y
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {

        tsvq {
            inputFieldName : "bluecoatInput",
            fieldSep : " ",
            quoteChar : "\"",
            trim : true,
            fieldNames : [
              "date",
              "time",
              "c-ip",
              "cs-username",
              "cs(User-Agent)",
              "sc-filter-result",
              "sc-status",
              "s-action",
              "sc-bytes",
              "cs-bytes",
              "cs-method",
              "cs-uri-scheme",
              "cs-host",
              "cs-uri-path",
              "cs-uri-query",
              "sc-filter-category",
              "s-ip"
            ]
        }
      },
      {
        addValuesIfAbsent  {
            logSourceType : "BlueCoat"
            deviceNameOrIp : "@{logCollectionHost}"
        }
      },
      {
        fieldAggregator{
          startTime : ["%{date} %{time}"],
          requestUrl : [
              "%{cs-uri-scheme}://%{cs-host}:%{cs-uri-port}%{cs-uri-path}?%{cs-uri-query}",
              "%{cs-uri-scheme}://%{cs-host}%{cs-uri-path}?%{cs-uri-query}"
          ],
          reason : [
              "%{x-virus-id}, %{x-icap-error-code} : %{x-icap-error-details}"
          ]  
        }
      },
      { # populate fields with raw data (will be converted by translate in the right way) 
        setValues {
          applicationProtocol : "@{cs-uri-scheme}", 
          transportProtocol : "@{cs-uri-scheme}"
        }
      },
      {
        translate {
          field : applicationProtocol
          dictionary : {
             http : http
             https : https
             ftp : ftp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      },
      {
        translate {
          field : transportProtocol
          dictionary : {
             http : tcp
             https : tcp
             ftp : tcp
             tcp : tcp
             udp : udp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      }

    ]
  },
  {
    id : bluecoatKVPlaposte
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {

        tsvq {
            inputFieldName : "bluecoatInput",
            fieldSep : " ",
            quoteChar : "\"",
            trim : true,
            fieldNames : [
              "s-ip",
              "startTime",
              "cs-username",
              "cs-method",
              "cs-uri",
              "cs-version",
              "sc-status",
              "cs-bytes",
              "rs-status",
              "rs-bytes",
              "s-action",
              "sc-bytes",
              "time-taken",
              "sr-bytes",
              "c-ip",
              "c-port",
              "cs(User-Agent)",
              "sc-filter-category",
              "s-icap-status",
              "rs(content-type)",
              "cs-ip",
              "x-cs-connection-dscp",
              "s-source-port"
            ]
        }
      },
      {
        urlExtract {
          inputFieldName : "cs-uri",
          #destFields : ["requestScheme", "destinationUserName", "destinationNameOrIp", "_destinationPort", "requestPath", "requestQuery"]
        }
      },
      {
        addKeyValuesIfMissing  {
            logSourceType : "BlueCoat"
            deviceNameOrIp : "@{logCollectionHost}"
        }
      },

      {
        fieldAggregator{
          reason : [
              "%{s-icap-status}"
          ]  
        }
      },
      { # populate fields with raw data (will be converted by translate in the right way) 
        setValues {
          applicationProtocol : "@{requestScheme}", 
          transportProtocol : "@{requestScheme}"
        }
      } ,
      {
        translate {
          field : applicationProtocol
          dictionary : {
             http : http
             https : https
             ftp : ftp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      },
      {
        translate {
          field : transportProtocol
          dictionary : {
             http : tcp
             https : tcp
             ftp : tcp
             tcp : tcp
             udp : udp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      }

    ]
  },
  {
    id : bluecoatKVPjpmc
    importCommands : [ "org.kitesdk.morphline.**", "com.securityx.model.mef.morphline.**"]

    commands : [
      {

        tsvq {
          inputFieldName : "bluecoatInput",
          fieldSep : " ",
          quoteChar : "\"",
          trim : true,
          fieldNames : [
            "date",
            "time",
            "time-taken",
            "c-ip",
            "sc-status",
            "s-action",
            "sc-bytes",
            "cs-bytes",
            "cs-method",
            "cs-uri-scheme",
            "cs-host",
            "cs-uri-port",
            "cs-uri-path",
            "cs-uri-query",
            "rs-time-taken",
            "s-supplier-ip",
            "cs(Content-Type)",
            "cs(User-Agent)",
            "sc-filter-category",
            "x-virus-id",
            "s-ip",
            "cs(X-Forwarded-For)"
          ]
        }
      },
      {
        if {
          conditions: [
            {not {equals {cs(X-Forwarded-For): ["-"]}}}  #test if field is present and not empty
          ]
          then: [
            {
              removeFields {
                blacklist : ["glob:c-ip"]
                whitelist: []
              }
            },
            {
              addKeyValuesIfMissing  {
                "c-ip" : "@{cs(X-Forwarded-For)}"
              }
            }

          ]
          else: [

          ]
        }
      },
      {
        addKeyValuesIfMissing  {
          logSourceType : "BlueCoat"
          deviceNameOrIp : "@{logCollectionHost}"
          startTime: "@{date} @{time}"
        }
      },

      {
        fieldAggregator{
          reason : [
            "%{x-virus-id}"
          ]
        }
      },
      { # populate fields with raw data (will be converted by translate in the right way)
        setValues {
          applicationProtocol : "@{requestScheme}",
          transportProtocol : "@{requestScheme}"
        }
      },
      {
        translate {
          field : applicationProtocol
          dictionary : {
            http : http
            https : https
            ftp : ftp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      },
      {
        translate {
          field : transportProtocol
          dictionary : {
            http : tcp
            https : tcp
            ftp : tcp
            tcp : tcp
            udp : udp
          }
          fallback : Unknown # if no fallback is defined and no match is found then the command fails
        }
      }

    ]
  }
]