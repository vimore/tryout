include classpath("logparsingjob.conf")
morphlines: [
  {
    # Name used to identify a morphline. E.g. used if there are multiple
    # morphlines in a morphline config file
    id: windowssplunkcef

    # Import all morphline commands in these java packages and their subpackages.
    # Other commands that may be present on the classpath are not visible to this
    # morphline.
    importCommands: [ "org.kitesdk.morphline**", "com.securityx.model.mef.morphline.**"]


    #SAMPLE LOG : windows snare
    #MSWinEventLog  0 Security  9676  Thu Apr 24 12:43:48 2014  4672  Microsoft-Windows-Security-Auditing    E8SEC\W2K8R2-AD$ N/A Success Audit w2k8r2-AD.e8sec.lab Special Logon   Special privileges assigned to new logon.    Subject:   Security ID:  S-1-5-18   Account Name:  W2K8R2-AD$   Account Domain:  E8SEC   Logon ID:  0x285d611    Privileges:  SeSecurityPrivilege     SeBackupPrivilege     SeRestorePrivilege     SeTakeOwnershipPrivilege     SeDebugPrivilege     SeSystemEnvironmentPrivilege     SeLoadDriverPrivilege     SeImpersonatePrivilege     SeEnableDelegationPrivilege 9675 

    commands: [
      {
        if {
          conditions: [{not { contains {externalId:[]${windows_ad.accepted_event_ids}}}}]
          then: [
            {
              addKeyValuesIfMissing {
                logSourceType: "_skipIAM"
                externalLogSourceType: "MSWinEventLog-splunkcef"
              }
            }
          ]
          else: [
            {
              removeValues {
                nameBlacklist : ["literal:logSourceType"]
                nameWhitelist: []
                valueBlacklist : ["literal:Cef"]
              }
            } ,
            {
              #clean up we discard cefSignaturId collected by cef
              removeFields {
                blacklist : ["literal:cefSignatureId", "literal:cefEventName"]
                whitelist: []
              }
            },
            # clean up deviceFacility
            {
              grok {
                dictionaryString : """
                  JOURNAL [^.]+
                """
                expressions : {
                  deviceFacility : """%{JOURNAL:journalName}\.?"""
                }
                extract : true,
                findSubstrings : true,
                addEmptyStrings : false
              }
            },
            {
              addKeyValuesIfMissing {
                cefSignatureId: "@{cs2}-@{externalId}-@{cs1}"
              }
            },
            {
              mapRules {
                fieldName :  "externalId",
                catchExceptions: false
                throwExceptionIfAllRulesFailed: false
                rules: [
                  # 4768 (not sample)
                  #{
                  #  commands: [
                  #    {contains {externalId: ["4768"]}}
                  #    {
                  #      grok {
                  #        #Security 4768
                  #        #A Kerberos authentication ticket (TGT) was requested.    Account Information:   Account Name:  jyria   Supplied Realm Name: e8sec.lab   User ID:   S-1-5-21-1908711140-209524994-2501478566-1104    Service Information:   Service Name:  krbtgt   Service ID:  S-1-5-21-1908711140-209524994-2501478566-502    Network Information:   Client Address:  ::ffff:192.168.12.21   Client Port:  58741    Additional Information:   Ticket Options:  0x40810010   Result Code:  0x0   Ticket Encryption Type: 0x12   Pre-Authentication Type: 2    Certificate Information:   Certificate Issuer Name:     Certificate Serial Number:    Certificate Thumbprint:      Certificate information is only provided if a certificate was used for pre-authentication.    Pre-authentication types, ticket options, encryption types and result codes are defined in RFC 4120. 10903
                  #        dictionaryString: """
                  #    SNAREMSGDESC A Kerberos authentication ticket \(TGT\) was requested\.
                  #    ACCOUNTNAME \S+
                  #    SUPPLIEDREALMNAME \S+
                  #    USERID \S+
                  #    SERVICENAME .*?\S
                  #    SERVICEID \S+
                  #    CLIENTADDRESS \S+
                  #    CLIENTPORT \S+
                  #    TICKETOPTIONS \S+
                  #    RESULTCODE \S+
                  #    TICKETENCRYPTIONTYPE \S+
                  #    PREAUTHENTICATIONTYPE \S+
                  #    CERTIFICATEISSUER \S+
                  #    CERTIFICATESERIALNUMBER \S+
                  #    CERTIFICATETHUMBPRINT \S+
                  #
                  #  """
                  #        expressions: {
                  #          msg: """Account\sInformation:\s+Account\sName:\s+%{ACCOUNTNAME:destinationUserName}\s+Supplied\sRealm\sName:\s+%{SUPPLIEDREALMNAME:destinationNtDomain}\s+User\sID:\s+%{USERID:destinationSecurityID}\s+Service\sInformation:\s+Service\sName:\s+%{SERVICENAME}\s+Service\sID:\s+%{SERVICEID:destinationServiceSecurityID}\s+Network\sInformation:\s+Client\sAddress:\s+%{CLIENTADDRESS:sourceAddress}\s+Client\sPort:\s+%{CLIENTPORT:sourcePort}\s+Additional\sInformation:\s+Ticket\sOptions:\s+%{TICKETOPTIONS:ticketOptions}\s+Result\sCode:\s+%{RESULTCODE:status}\s+Ticket\sEncryption\sType:\s+%{TICKETENCRYPTIONTYPE:ticketEncryptionType}\s+Pre-Authentication\sType:\s+%{PREAUTHENTICATIONTYPE:preAuthenticationType}\s+Certificate\sInformation:\s+Certificate\sIssuer\sName:\s+(?:%{CERTIFICATEISSUER:certificateIssuer}\s+)?Certificate\sSerial\sNumber:\s+(?:%{CERTIFICATESERIALNUMBER:certificateSerialNumber}\s+)?Certificate\sThumbprint:\s+(?:%{CERTIFICATETHUMBPRINT:certificateThumbPrint}\s+)?Certificate\sinformation.*"""
                  #       }
                  #       extract: true
                  #       findSubstrings: false
                  #       addEmptyStrings: false
                  #     }
                  #   }
                  #   {addKeyValuesIfMissing {_MatchedEvent: "windowsTryRules", eventOutcome="@{categoryOutcome}"}}
                  # ]
                  #},
                  # 4671
                  #{
                  #  commands: [
                  #    {contains {externalId: ["4771"]}}
                  #    {
                  #      grok {
                  #        #Security 4771
                  #        #Kerberos pre-authentication failed.    Account Information:   Security ID:  S-1-5-21-1908711140-209524994-2501478566-1104   Account Name:  jyria    Service Information:   Service Name:  krbtgt/e8sec.lab    Network Information:   Client Address:  ::1   Client Port:  0    Additional Information:   Ticket Options:  0x40810010   Failure Code:  0x18   Pre-Authentication Type: 2    Certificate Information:   Certificate Issuer Name:     Certificate Serial Number:     Certificate Thumbprint:      Certificate information is only provided if a certificate was used for pre-authentication.    Pre-authentication types, ticket options and failure codes are defined in RFC 4120.    If the ticket was malformed or damaged during transit and could not be decrypted, then many fields in this event might not be present. 10743
                  #        dictionaryString: """
                  #    SNAREMSGDESC Kerberos pre-authentication failed\.
                  #    SECURITYID \S+
                  #    ACCOUNTNAME \S+
                  #    SERVICENAME .*?\S
                  #    CLIENTADDRESS \S+
                  #    CLIENTPORT \S+
                  #    TICKETOPTIONS \S+
                  #    FAILURECODE \S+
                  #    PREAUTHENTICATIONTYPE \S+
                  #    CERTIFICATEISSUER \S+
                  #    CERTIFICATESERIALNUMBER \S+
                  #    CERTIFICATETHUMBPRINT \S+
                  #    USER .*?
                  #    COMPUTERNAME \S+
                  #  """
                  #        expressions: {
                  #          msg: """Account\sInformation:\s+Security\sID:\s+%{SECURITYID:destinationSecurityID}\s+Account\sName:\s+%{ACCOUNTNAME:destinationUserName}\s+Service\sInformation:\s+Service\sName:\s+%{SERVICENAME}\s+Network\sInformation:\s+Client\sAddress:\s+%{CLIENTADDRESS:sourceAddress}\s+Client\sPort:\s+%{CLIENTPORT:sourcePort}\s+Additional\sInformation:\s+Ticket\sOptions:\s+%{TICKETOPTIONS:ticketOptions}\s+Failure\sCode:\s+%{FAILURECODE:status}\s+Pre-Authentication\sType:\s+%{PREAUTHENTICATIONTYPE:preAuthenticationType}\s+Certificate\sInformation:\s+Certificate\sIssuer\sName:\s+(?:%{CERTIFICATEISSUER:certificateIssuer}\s+)?Certificate\sSerial\sNumber:\s+(?:%{CERTIFICATESERIALNUMBER:certificateSerialNumber}\s+)?Certificate\sThumbprint:\s+(?:%{CERTIFICATETHUMBPRINT:certificateThumbPrint})?Certificate\sinformation.*\s+User:\s+%{USER}\s+ComputerName:\s+%{COMPUTERNAME}"""
                  #        }
                  #        extract: true
                  #        findSubstrings: false
                  #        addEmptyStrings: false
                  #      }
                  #    }
                  #    {addKeyValuesIfMissing {_MatchedEvent: "windowsTryRules", eventOutcome: "@{categoryOutcome}"}}
                  #  ]
                  #},
                  # 4769
                  #{
                  #  commands: [
                  #    {contains {externalId: ["4769"]}}
                  #    {
                  #      grok {
                  #        #Security 4769
                  #        #A Kerberos service ticket was requested.    Account Information:   Account Name:  jyria@E8SEC.LAB   Account Domain:  E8SEC.LAB   Logon GUID:  {AD7B3FA1-ABFF-23FE-F052-73002A41531D}    Service Information:   Service Name:  W2K8R2-SRC$   Service ID:  S-1-5-21-1908711140-209524994-2501478566-1106    Network Information:   Client Address:  ::ffff:192.168.12.21   Client Port:  58742    Additional Information:   Ticket Options:  0x40810000   Ticket Encryption Type: 0x12   Failure Code:  0x0   Transited Services: -    This event is generated every time access is requested to a resource such as a computer or a Windows service.  The service name indicates the resource to which access was requested.    This event can be correlated with Windows logon events by comparing the Logon GUID fields in each event.  The logon event occurs on the machine that was accessed, which is often a different machine than the domain controller which issued the service ticket.    Ticket options, encryption types, and failure codes are defined in RFC 4120.  4767
                  #        dictionaryString: """
                  #    SNAREMSGDESC A Kerberos service ticket was requested\.
                  #    ACCOUNTNAME \S+
                  #    ACCOUNTDOMAIN \S+
                  #    LOGONGUID \S+
                  #    SERVICENAME .*?\S
                  #    SERVICEID \S+
                  #    CLIENTADDRESS \S+
                  #    CLIENTPORT \S+
                  #    TICKETOPTIONS \S+
                  #    TICKETENCRYPTIONTYPE \S+
                  #    FAILURECODE \S+
                  #    TRANSITEDSERVICE \S+
                  #  """
                  #        expressions: {
                  #          msg: """Account\sInformation:\s+Account\sName:\s+(?:%{ACCOUNTNAME:destinationUserName})?\s+Account\sDomain:\s+(?:%{ACCOUNTDOMAIN:destinationNtDomain})?\s+Logon\sGUID:\s+%{LOGONGUID:destinationLogonGUID}\s+Service\sInformation:\s+Service\sName:\s+(?:%{SERVICENAME})?\s+Service\sID:\s+%{SERVICEID:destinationServiceSecurityID}\s+Network\sInformation:\s+Client\sAddress:\s+%{CLIENTADDRESS:sourceAddress}\s+Client\sPort:\s+%{CLIENTPORT:sourcePort}\s+Additional\sInformation:\s+Ticket\sOptions:\s+%{TICKETOPTIONS:ticketOptions}\s+Ticket\sEncryption\sType:\s+%{TICKETENCRYPTIONTYPE:ticketEncryptionType}\s+Failure\sCode:\s+%{FAILURECODE:status}\s+Transited Services:\s+%{TRANSITEDSERVICE:transitedService}\s+This\sevent\sis.*"""
                  #        }
                  #        extract: true
                  #        findSubstrings: false
                  #        addEmptyStrings: false
                  #      }
                  #    }
                  #    {addKeyValuesIfMissing {_MatchedEvent: "windowsTryRules", eventOutcome: "/Success"}}
                  #  ]
                  #},
                  # 4768
                  {
                    values: ["4768"],
                    commands: [
                      #{contains {externalId: ["4768"]}}
                      {
                        addKeyValuesIfMissing  {
                          destinationNameOrIp: "@{dhost}"
                          destinationUserName: "@{duser}"
                          destinationNtDomain: "@{e8SuppliedRealmName}"
                          destinationSecurityID: "@{e8UserID}"
                          destinationServiceName: "@{e8ServiceName}"
                          destinationServiceSecurityID: "@{e8ServiceID}"
                          sourceNameOrIp: "@{e8ClientAddress}"
                          sourcePort: "@{e8ClientPort}"
                          ticketOptions: "@{e8TicketOptions}"
                          status: "@{e8Status}"
                          ticketEncryptionType: "@{e8TicketEncryptionType}"
                          preAuthenticationType: "@{e8PreAuthType}"
                          #certificateIssuer: "@{}"
                          #certificateSerialNumber: "@{}"
                          #certificateThumbPrint: "@{}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4769
                  {
                    values: ["4769"],
                    commands: [
                      #{contains {externalId: ["4769"]}}
                      {
                        addKeyValuesIfMissing  {
                          destinationNameOrIp: "@{dhost}"
                          destinationUserName: "@{duser}"
                          destinationNtDomain: "@{e8SuppliedRealmName}"
                          destinationLogonGUID: "@{duid}"
                          destinationServiceName: "@{e8ServiceName}"
                          destinationServiceSecurityID: "@{e8ServiceID}"
                          sourceNameOrIp: "@{e8ClientAddress}"
                          sourcePort: "@{e8ClientPort}"
                          ticketOptions: "@{e8TicketOptions}"
                          status: "@{e8Status}"
                          ticketEncryptionType: "@{cs5}"
                          transitedService: "@{e8TicketEncryptionType}"
                          #certificateIssuer: "@{}"
                          #certificateSerialNumber: "@{}"
                          #certificateThumbPrint: "@{}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4771
                  {
                    values: ["4771"]
                    commands: [
                      #{contains {externalId: ["4771"]}}
                      {
                        addKeyValuesIfMissing  {
                          destinationSecurityID: "@{cs3}"
                          destinationNameOrIp: "@{dhost}"
                          destinationUserName: "@{duser}"
                          destinationNtDomain: "@{e8SuppliedRealmName}"
                          destinationLogonGUID: "@{duid}"
                          destinationServiceName: "@{e8ServiceName}"
                          destinationServiceSecurityID: "@{e8ServiceID}"
                          sourceNameOrIp: "@{e8ClientAddress}"
                          sourcePort: "@{e8ClientPort}"
                          ticketOptions: "@{e8TicketOptions}"
                          status: "@{e8Status}"
                          ticketEncryptionType: "@{cs5}"
                          transitedService: "@{e8TicketEncryptionType}"
                          #certificateIssuer: "@{}"
                          #certificateSerialNumber: "@{}"
                          #certificateThumbPrint: "@{}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4656
                  {
                    values: ["4656"]
                    commands: [
                      #{contains {externalId: ["4656"]}}
                      {
                        addKeyValuesIfMissing  {
                          sourceSecurityID: "@{cs3}"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          privileges: "@{dpriv}"
                          destinationObjectServer: "@{e8ObjServer}"
                          destinationObjectType: "@{e8ObjType}"
                          destinationObjectName: "@{e8ObjName}"
                          sourceProcessId: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          desiredAccess: "@{e8Accesses}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4661
                  {
                    values: ["4661"]
                    commands: [
                      #{contains {externalId: ["4661"]}}
                      {
                        addKeyValuesIfMissing  {
                          sourceSecurityID: "@{cs3}"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          privileges: "@{dpriv}"
                          destinationObjectServer: "@{e8ObjServer}"
                          destinationObjectType: "@{e8ObjType}"
                          destinationObjectName: "@{e8ObjName}"
                          sourceProcessId: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          desiredAccess: "@{e8Accesses}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4663
                  {

                    values: ["4663"]
                    commands: [
                      #{contains {externalId: ["4663"]}}
                      {
                        addKeyValuesIfMissing  {
                          sourceSecurityID: "@{cs3}"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          privileges: "@{dpriv}"
                          destinationObjectServer: "@{e8ObjServer}"
                          destinationObjectType: "@{e8ObjType}"
                          destinationObjectName: "@{e8ObjName}"
                          #destinationObjectHandle: "@{}"
                          sourceProcessId: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          desiredAccess: "@{e8Accesses}"
                          destinationNameOrIp: "@{dhost}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 5140
                  {
                    values: ["5140"]
                    commands: [
                      #{contains {externalId: ["5140"]}}
                      {
                        addKeyValuesIfMissing  {
                          sourceSecurityID: "@{cs3}"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          destinationObjectType: "@{e8ObjType}"
                          sourceNameOrIp: "@{e8SrcAddr}"
                          sourcePort: "@{spt}"
                          destinationShareName: "@{e8ShareName}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },

                  # 4672
                  {
                    values: ["4672"]
                    commands: [
                      #{contains {externalId: ["4672"]}}
                      {
                        addKeyValuesIfMissing  {
                          destinationSecurityID: "@{cs3}"
                          destinationUserName: "@{duser}"
                          destinationNtDomain: "@{dntdom}"
                          destinationNameOrIp: "@{dhost}"
                          destinationLogonID: "@{cs4}"
                          privileges: "@{dpriv}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4676
                  {
                    values: ["4776"]
                    commands: [
                      #{contains {externalId: ["4776"]}}
                      {
                        addKeyValuesIfMissing {
                          authenticationPackage: "@{cs6}"
                          destinationUserName: "@{e8SrcAcc}"
                          destinationNameOrIp: "@{dhost}"
                          #status: "@{}"
                        }
                      }
                      #{
                      #  grok {
                      #    #Security 4776
                      #    #The computer attempted to validate the credentials for an account.    Authentication Package: MICROSOFT_AUTHENTICATION_PACKAGE_V1_0  Logon Account: jyria  Source Workstation: W2K8R2LAB  Error Code: 0x0  10901
                      #    dictionaryString: """
                      #SNAREMSGDESC The computer attempted to validate the credentials for an account\.
                      #AUTHENTICATIONPACKAGE \S+
                      #LOGONACCOUNT \S+
                      #SOURCEWORKSTATION \S+
                      #ERRORCODE \S+
                      #USER .*?
                      #COMPUTERNAME \S+
                      #"""
                      #    expressions: {
                      #      msg: """Authentication\sPackage:\s+%{AUTHENTICATIONPACKAGE:authenticationPackage}\s+Logon\sAccount:\s+%{LOGONACCOUNT:destinationUserName}\s+Source\sWorkstation:\s+%{SOURCEWORKSTATION:sourceNameOrIp}\s+Error\sCode:\s+%{ERRORCODE:status}\s+User:\s+%{USER}\s+ComputerName:\s+%{COMPUTERNAME}"""
                      #    }
                      #    extract: true
                      #    findSubstrings: false
                      #    addEmptyStrings: false
                      #  }
                      #}
                      {addKeyValuesIfMissing {_MatchedEvent: "windowsTryRules", eventOutcome="/Success"}}
                    ]
                  },
                  # 4634
                  {
                    values: ["4634"]
                    commands: [
                      #{contains {externalId: ["4634"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      },
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "An account was logged off"
                          destinationUserName: "@{duser}"
                          destinationNtDomain: "@{dntdom}"
                          #destinationSecurityID: "@{}"
                          destinationLogonID: "@{cs4}"
                          destinationLogonType: "@{cn2}"
                          _MatchedEvent: "windowsTryRules",
                          eventOutcome="/Success"
                        }
                      }
                    ]
                  },
                  # 4647
                  {
                    values: ["4647"]
                    commands: [
                      #{contains {externalId: ["4647"]}}
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "User initiated logoff"
                          destinationUserName: "@{duser}"
                          #destinationSecurityID: "@{}"
                          destinationNtDomain: "@{dntdom}"
                          destinationLogonID: "@{cs4}"
                          _MatchedEvent: "windowsTryRules",
                          eventOutcome="/Success"
                        }
                      }

                    ]
                  },
                    # 4648
                  {
                    values: ["4648"]
                    commands: [
                      #{contains {externalId: ["4648"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : duid
                          outputFields : [sourceLogonGUID, destinationLogonGUID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        grok {
                          #
                          dictionaryString : """
                            PORT \d+
                            ADDRESS \S+
                        """
                          #
                          expressions : {
                            dpt : """(?:-|%{PORT:sourcePort})"""
                            dst : """(?:-|%{ADDRESS:sourceNameOrIp})"""
                          }
                          extract : true
                          findSubstrings : false
                          addEmptyStrings : false
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A logon was attempted using explicit credentials"
                          sourceSecurityID: "@{cs3}"
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          sourceProcessId: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          #sourceNameOrIp: "@{dst}"
                          #sourcePort: "@{dpt}"

                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4723
                  {
                    values: ["4723"]
                    commands: [
                      #{contains {externalId: ["4723"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "An attempt was made to change an account's password."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          # privileges not extractby splunk due to missing : in the windows event
                          privileges: "@{dpriv}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                # 4724
                  {
                    values: ["4724"]
                    commands: [
                      #{contains {externalId: ["4724"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "An attempt was made to reset an account's password."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4727
                  {
                    values: ["4727"]
                    commands: [
                      #{contains {externalId: ["4727"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A security-enabled global group was created"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4731
                  {
                    values: ["4731"]
                    commands: [
                      #{contains {externalId: ["4731"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A security-enabled local group was created"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4754
                  {
                    values: ["4754"]
                    commands: [
                      #{contains {externalId: ["4754"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A security-enabled universal group was created"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4756
                  {
                    values: ["4756"]
                    commands: [
                      #{contains {externalId: ["4756"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationLdapUser, destinationGroup]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationGroupNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A member was added to a security-enabled universal group."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          ##destinationGroup: "@{e8GroupName}"
                          ##destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4728
                  {
                    values: ["4728"]
                    commands: [
                      #{contains {externalId: ["4728"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationLdapUser]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A member was added to a security-enabled global group."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4729
                  {
                    values: ["4729"]
                    commands: [
                      #{contains {externalId: ["4729"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs4
                          outputFields : [sourceLogonID, destinationLogonID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A member was removed from a security-enabled global group."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4732
                  {
                    values: ["4732"]
                    commands: [
                      #{contains {externalId: ["4732"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationLdapUser]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs4
                          outputFields : [sourceLogonID, destinationLogonID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A member was added to a security-enabled local group."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
                  # 4733
                  {
                    values: ["4733"]
                    commands: [
                      #{contains {externalId: ["4733"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationLdapUser]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs4
                          outputFields : [sourceLogonID, destinationLogonID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }

                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A member was removed from a security-enabled local group."
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          ##sourceLogonGUID: "@{}"
                          ##destinationSecurityID: "@{}"
                          ##destinationNtDomain:
                          ##destinationLogonGUID:
                          destinationNameOrIp: "@{dhost}"
                          destinationGroup: "@{e8GroupName}"
                          destinationGroupNtDomain: "@{e8GroupDomain}"
                          _MatchedEvent: "windowsTryRules",
                        }
                      }
                    ]
                  },
#duplicate entry
#                  # 4733
#                  {
#                    values: ["4733"]
#                    commands: [
#                      #{contains {externalId: ["4733"]}}
#                      {
#                        split {
#                          inputField : duser
#                          outputFields : [sourceUserName, destinationUserName]
#                          separator : "\\n"
#                          isRegex : false
#                          #separator : """\s*,\s*"""
#                          #isRegex : true
#                          addEmptyStrings : false
#                          trim : true
#                        }
#                      }
#                      {
#                        split {
#                          inputField : dntdom
#                          outputFields : [sourceNtDomain, destinationNtDomain]
#                          separator : "\\n"
#                          isRegex : false
#                          #separator : """\s*,\s*"""
#                          #isRegex : true
#                          addEmptyStrings : false
#                          trim : true
#                        }
#                      }
#                      {
#                        split {
#                          inputField : cs4
#                          outputFields : [sourceLogonID, destinationLogonID]
#                          separator : "\\n"
#                          isRegex : false
#                          #separator : """\s*,\s*"""
#                          #isRegex : true
#                          addEmptyStrings : false
#                          trim : true
#                        }
#                      }
#                      {
#                        split {
#                          inputField : cs3
#                          outputFields : [sourceSecurityID, destinationSecurityID,destinationGroupSecurityID]
#                          separator : "\\n"
#                          isRegex : false
#                          #separator : """\s*,\s*"""
#                          #isRegex : true
#                          addEmptyStrings : false
#                          trim : true
#                        }
#                      }
#
#                      {
#                        addKeyValuesIfMissing {
#                          cefEventName: "A member was removed from a security-enabled local group."
#                          ##sourceNtDomain:
#                          sourceLogonID: "@{cs4}"
#                          ##sourceLogonGUID: "@{}"
#                          ##destinationSecurityID: "@{}"
#                          ##destinationNtDomain:
#                          ##destinationLogonGUID:
#                          destinationNameOrIp: "@{dhost}"
#                          destinationGroup: "@{e8GroupName}"
#                          destinationNtDomain: "@{e8GroupDomain}"
#                          _MatchedEvent: "windowsTryRules",
#                        }
#                      }
#                    ]
#                  },
                  # 4742
                  {
                    values: ["4742"]
                    commands: [
                      #{contains {externalId: ["4742"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          #sourceSecurityID:
                          #sourceUserName:
                          #sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          #destinationSecurityID:
                          #destinationUserName:
                          #destinationNtDomain:
                          #adSamAccountName: "@{}"
                          #adDisplayName: "@{}"
                          #adUserPrincipalName: "@{}"
                          #adHomeDirectory: "@{}"
                          #adHomeDrive: "@{}"
                          #adScriptPath: "@{}"
                          #adProfilePath: "@{}"
                          #adUserWorkstation: "@{}"
                          #adPasswdLastSet: "@{}"
                          #accountExpires: "@{}"
                          #adPrimaryGroupID: "@{}"
                          #allowedToDelegateTo: "@{}"
                          #adOldUacvalues: ["@{}"]
                          #newUacValue: "@{}"
                          #adUserAccountControl: "@{}"
                          #adUserParameters: "@{}"
                          #adSidHistory: "@{}"
                          #logonHours: "@{}"
                          #adDnsHostName: "@{}"
                          #adServerPrincipalNames: "@{}"
                          privileges: "@{dpriv}"

                          _MatchedEvent: "windowsTryRules",
                        }
                      }

                    ]
                  },
                  # 4738
                  {
                    values: ["4738"]
                    commands: [
                      #{contains {externalId: ["4738"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A logon was attempted using explicit credentials"
                          destinationNameOrIp: "@{dhost}"
                          #sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          #destinationNtDomain:
                          adSamAccountName: "@{e8SAMAccountName}"
                          adDisplayName: "@{e8DisplayName}"
                          adUserPrincipalName: "@{e8UserPrincipalName}"
                          adHomeDirectory: "@{e8HomeDir}"
                          adHomeDrive: "@{e8HomeDrive}"
                          adScriptPath: "@{e8ScriptPath}"
                          adProfilePath: "@{e8ProfilePath}"
                          #adUserWorkstation: "@{}"
                          adPasswdLastSet: "@{e8PasswdLastSet}"
                          accountExpires: "@{e8AccountExpires}"
                          adPrimaryGroupID: "@{e8PrimaryGroupID}"
                          allowedToDelegateTo: "@{e8AllowedToDelegateTo}"
                          adOldUacValue: "@{e8OldUACValue}"
                          newUacValue: "@{e8NewUACValue}"
                          adUserAccountControl: "@{e8UserAccountControl}"
                          adUserParameters: "@{e8UserParameters}"
                          adSidHistory: "@{e8SIDHistory}"
                          logonHours: "@{e8LogonHours}"
                          privileges: "@{dpriv}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4624
                  {
                    values: ["4624"]
                    commands: [
                      {contains {externalId: ["4624"]}}
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : cs4
                          outputFields : [sourceLogonID, destinationLogonID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        grok {
                          #
                          dictionaryString : """
                            PORT \d+
                            ADDRESS [\S]+

                        """
                          #
                          expressions : {
                            spt : """(?:-|%{PORT:sourcePort})"""
                            src : """(?:-|%{ADDRESS:sourceAddress})"""
                          }
                          extract : true
                          findSubstrings : false
                          addEmptyStrings : false
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A logon was attempted using explicit credentials"
                          #SPCEF:deviceNameOrIp: "@{dvchost}"
                          destinationNameOrIp: "@{dhost}"
                          ##sourceSecurityID:
                          ##sourceUserName:
                          ##sourceNtDomain:
                          ##sourceLogonID:
                          sourceLogonType: "@{cn2}"
                          ##destinationSecurityID:
                          ##destinationUserName:
                          ##destinationNtDomain:
                          ##destinationLogonID:
                          destinationLogonGUID: "@{duid}"
                          sourceProcessID: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          #sourceNameOrIp: "@{}"
                          ##sourceAddress: "@{src}"
                          ##sourcePort: "@{spt}"
                          logonProcess: "@{e8LogonProcess}"
                          authenticationPackage: "@{cs6}"
                          transitedService: "@{sourceServiceName}"
                          packageName: "@{e8PackageName}"
                          keyLength: "@{cn3}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4625
                  {
                    values: ["4625"]
                    commands: [
                      #{contains {externalId: ["4625"]}}
                      {
                        split {
                          inputField : cs3
                          outputFields : [sourceSecurityID, destinationSecurityID]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : duser
                          outputFields : [sourceUserName, destinationUserName]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        split {
                          inputField : dntdom
                          outputFields : [sourceNtDomain, destinationNtDomain]
                          separator : "\\n"
                          isRegex : false
                          #separator : """\s*,\s*"""
                          #isRegex : true
                          addEmptyStrings : false
                          trim : true
                        }
                      }
                      {
                        grok {
                          #
                          dictionaryString : """
                            PORT \d+
                            ADDRESS \S+
                          """
                          #
                          expressions : {
                            spt : """(?:-|%{PORT:sourcePort})"""
                            src : """(?:-|%{ADDRESS:sourceAddress})"""
                          }
                          extract : true
                          findSubstrings : false
                          addEmptyStrings : false
                        }
                      }
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "An account failed to log on"
                          destinationNameOrIp: "@{dhost}"
                          ##sourceUserName:
                          ##sourceNtDomain:
                          sourceLogonID: "@{cs4}"
                          sourceLogonType: "@{cn2}"
                          ##destinationUserName:
                          ##destinationNtDomain:
                          status: "@{e8Status}"
                          subStatus: "@{cs5}"
                          sourceProcessID: "@{e8SrcProcessID}"
                          sourceProcessName: "@{dproc}"
                          sourceNameOrIp: "@{shost}"
                          ##sourceAddress: "@{}"
                          #sourcePort: "@{spt}"
                          logonProcess: "@{e8LogonProcess}"
                          authenticationPackage: "@{cs6}"
                          transitedService: "@{sourceServiceName}"
                          packageName: "@{e8PackageName}"
                          keyLength: "@{cn3}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4673
                  {
                    values: ["4673"]
                    commands: [
                      #{contains {externalId: ["4673"]}}
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "A privileged service was called"
                          destinationNameOrIp: "@{dhost}"
                          destinationUserName: "@{cs3}"
                          #sourceSecurityID: "@{}"
                          sourceUserName: "@{duser}"
                          sourceNtDomain: "@{dntdom}"
                          sourceLogonID: "@{cs4}"
                          #destinationServiceServer: "@{}"
                          #destinationProcessName: "@{}"
                          #sourceProcessID: "@{}"
                          sourceProcessName: "@{deviceProcessName}"
                          privileges: "@{dpriv}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  },
                  # 4674
                  {
                    values: ["4674"]
                    commands: [
                      #{contains {externalId: ["4674"]}}
                      {
                        addKeyValuesIfMissing {
                          cefEventName: "An operation was attempted on a privileged object"
                          destinationNameOrIp: "@{dhost}"
                          sourceNtDomain: "@{dntdom}"
                          sourceSecurityID: "@{cs3}"
                          sourceUserName: "@{duser}"
                          sourceLogonID: "@{cs4}"
                          destinationObjectServer: "@{e8ObjServer}"
                          destinationObjectType: "@{e8ObjType}"
                          destinationObjectName: "@{e8ObjName}"
                          #destinationObjectHandle: "@{}"
                          #provided directly : destinationProcessName: "@{}"
                          sourceProcessID: "@{e8ProcessID}"
                          sourceProcessName: "@{deviceProcessName}"
                          #desiredAccess: "@{}"
                          privileges: "@{dpriv}"
                          _MatchedEvent: "windowsTryRules"
                        }
                      }
                    ]
                  }
                ]
              }
            },
            {

              if {
                conditions: [
                  {contains {_MatchedEvent: [windowsTryRules]}}
                ]
                then: [
                  # {
                  # Microsoft-Windows-Security-Auditing:4769
                  #grok {
                  #  dictionaryString : """
                  #    JOURNAL [^:]+
                  #    EVENTID \d+
                  #  """
                  #  expressions : {
                  #    cefSignatureId : """%{JOURNAL:journalName}:%{EVENTID:eventID}"""
                  #  }
                  #  extract : true,
                  #  findSubstrings : true,
                  #  addEmptyStrings : false
                  #}
                  # },
                  #{
                  #  removeFields {
                  #    blacklist : ["literal:cefSignatureId"]
                  #    whitelist: []
                  #  }
                  #},
                  #{
                  #  translate {
                  #    field : eventOutcome
                  #    dictionary : {
                  #      "/Success" : "Success Audit",
                  #      "/Failure" : "Failure Audit"
                  #    }
                  #    fallback : "Information" # if no fallback is defined and no match is found then the command fails
                  #  }
                  #},
                  {
                    addKeyValuesIfMissing {
                      logSourceType: "IAMMef"
                      externalLogSourceType: "MSWinEventLog-splunkcef"
                      startTime: "@{receiptTime}"
                      #eventLogType : "@{eventOutcome}"
                    }
                  },
                  {
                    validateSupportedFormat {
                      failOnUnknownFields: "false"
                      defaultFormat: "IAMMef"
                    }
                  }
                ]
                else: [
                  {
                    addKeyValuesIfMissing {
                      logSourceType: "UnMatched-IAMMef"
                      externalLogSourceType: "MSWinEventLog-cef"
                    }
                  }
                ]
              }
            }
          ]
        }
      }

    ]
  }
]